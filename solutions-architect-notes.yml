IAM access keys: long term credentials, used with IAM users only,
use access keys when using CLI,
dont change automatically or regularly,
similar to user name and password, but differences are:
an IAM user can have two access keys, either 0, 1, or 2,
can be created, deleted, made inactive or active,
formed from two parts: access key ID, and secret access key
access key id is like username, while secret acces key is like password

aws configure: allows us to configure the default configuration for CLI
aws configure --profile namedProfile: named profiles, allow us to configure multiple aws accounts to our CLI instead of just using one account, whenever running commands append '--profile nameOfProfile' to run from NameOfProfile account


NIST definition of cloud computing: 5 characteristics of cloud computing 
On demand self service: allows you to provision capabilities as needed without requiring human interaction
broad network access: capabilities are available over the network and accessed through standard mechanisms
Resource pooling: about abstraction, there is a sens of location independence and resources are pooled to server multiple consumers using a multi tenant model
Rapid elasticity: resources can be elastically provisioned and released to scale rapidly in real time with no human interaction
Measured service: Resource usage can be monitored, controlled, reported, and billed 


Public vs Private vs Hybrid vs Multi Cloud Models:
multi-cloud: using multiple public clouds for higher levels of availability and durability
private: aws outposts, is on premise and still meets 5 requirements of cloud computing, most on premise traditional datacenters do not meet 5 requirements
hybrid: using both public cloud and private cloud cooperating together as a single environment

hybrid environment: using public cloud on your on premise infrastructure


YAML: language for defining data or configuration
characteristics:
unordered collection of key-value pairs, (dictionary)
indentation matters, spaces are like brackets



Encryption:
  

Encryption at rest: helps to secure data from physical access, example would be encrypting data stored on a hard drive, and decrypting when it reads.  Secret(password) is used to decrypt the data.
In cloud computing, data is encrypted while in s3
encryption at transit: helps to secure data that is being transferred between two place, encrypted with an encryption tunnel

Plaintext: un-encrypted data, data that you can load into an app and use
algorithm: code that takes plain text and an encryption key and generates encrypted data
ciphertext: encrypted data

key: "password", decrypts ciphertext
  different types: symmetric key
    symmetric key: same key is used for both encryption and decryption processes, used by a single party
    asymmetric key: comprised of public and private keys, public key is used to encrypt, the private key is used to decrypt, used by two or more parties

signing: allows verification of who sent the encrypted message,
        requires the sender to sign with private key,
        requires the receiver to decrypt signature with sender's public key

steganography: allows you to embed data inside other data, like hiding ciphertext in an image



NETWORKING:


OSI 5 LAYER MODEL: networking stack, that includes seven software layers for transporting data
  physical, data link, network, transport, session, presentation, application layers
  layer x understands its layer and below, built on top of other layers

  media layers: how data is moved between point A and B
  physical, data link, network, 
  
  host layers: how data is chopped up and reassembled for transport and formatted to be understood by both sides of a network connection,
  transport, session, presentation, application layers

Physical Layer: Layer 1: defines the transmission and reception of raw bit streams between a device and a shared physical medium.

can be different physical mediums, copper(electrical), fibre(light), or WIFI(RF)
no device addressing at layer 1, all data is processed by all devices
if multiple devices transmit at once a collission occurs
no media access control and no collision detection
tend to not scale very well

  hub: anything received on any port, is transmitted on every other port, including errors and collisions


Data Link Layer: Layer, 2: packages frame to be sent on layer 1, the physical layer
  ethernet: most popular l2 protocol used generally for local networks 

  MAC address: unique hardware address

  frames: format for sending information over layer 2 network, can be addressed to MAC address or broadcast to all
    payload: the data the frame carries from source to destination.  It's generally provided by layer 3 and the ET attribute defines which l3 protocol is used

  CSMA/CD: provides controlled access to physical medium via:
  carrier sense multiple access: checks carrier(to see if anything is transmitting on layer 1), and if no carrier then passes frame to layer 1 to transmit, if there is carrier it waits to send until a carrier is not detected
  collision detection: detects if there was collision, if there was collision reattempts collision after a certain amount of time

  switch: intelligent layer 2 device that works similarly to a hub but much more efficient because it understands layer 2 
  HOW IT WORKS:
  learns which devices are connected at layer 2 and populates a MAC address table with that MAC address's port
  if it receives frame for MAC address in table, it orders that frame to be sent to that port only on layer 1, unlike a hub which would send to every single port
  if it receives frame for MAC address not in table, it sends to all ports
  every x port has X collision domains, meaning if there is a collision on a port, it only occurs on that single port

Network Layer, Layer 3: gets data from one location to another
uses packets which are similar to frames,
generally an ip packet doesnt change, while a frame does between each lvl2 destination because a frame has address of next intermediary address and ip packet has source ip address and destination ip address,

contains l4 protocol in packet in protocol field and data received from layer 4 

ipv4 and ipv6 packets, ipv6 packets have larger addresses

ipv4 addressing:
DHCP: machine that assigns IP addresses
Ip addresses have a network part and a host part, if they have same network part they are on same network
subnet masks: divides the host and network part via shorthand prefix(starts from left), letting an IP device know if another device is on same network or not, which influences if it communicates directly with device or default gateway

Every router has one or more route tables, letting router know where to send packet or destination.  Packets are routed, hop by hop across the internet.  

default gateway: IP address on local network that packets are forwarded to if intended desination is not a local ip address, typically a router

ARP, Address Resolution Protocol: finds Mac address for a given IP address,
a protocol that allows us to encapsulate layer 3 packet in a l2 frame, broadcasts to all devices on the ip address network and asks for mac adress, the corresponding device then sends mac address and frame is created
ipv6: 


How to convert decimal to binary for IPv4 addressing: 
133.33.33.7 <=> 10000101.00100001.00100001.00000111
Each number in dotted decimal notation maps to 8 bits


The Transport Layer, Layer 4 and the Session Layer, Layer 5: provides most of the functionality that supports most of the networking of the internet

Transmission Control Protocol, TCP
User datagram Protocol, UDP
packages data in segments, encapsulated within IP packets,
used in same way but TCP adds more reliable architecture,

TCP/IP: TCP running on top of IP, used for most of the important Application Layer protocols like HTTP, HTTPS, SSH, and so on, connection oriented protocol
has source and destination ports, sequence number
connection between random port on client and known port on the server, flags set up connection, makes error checking, ordering, and retransmission possible because everything is connection based

statefull firewall: extension of security group, understands TCP/IP connection so only one rule is needed, initiating request source port and destination port and response traffic is automatically allowed

stateless firewall, (Network ACL): two rules will be required, one to define the outbound traffic source and destination port and the other to allow the inbound traffic source and destination port

UDP/IP: faster because it doesn't have the TCP overhead but less reliable, 


NAT, Network Address Translation: helps overcome the ipv4 shortages by translating private IPv4 addresses to public ip addresses so packets can go to public internet then translate back in reverse, takeaway is that private ip address needs to initiate communication because if public tries to communicate with private there wont be an entry in NAT table

static NAT: 1 private to 1 fixed public address, use when a private IP needs access to public internet by using a public IP and where these IPs need to be consistent 
dynamic NAT: 1 private to 1st available public ip in Nat table pool, use when you have less public IPs than private IP addresses and you want to be efficient with how they're used, if there are no available in the pool then public access can fail
port address Translation: many private to 1 public address, use for home router, use when you have many devices that use a single public address, NAT gateway with AWS use this way, uses ports to identify devices by using a source and destination port for each packet, 

NAT table: maps one to one private Ip to allocated public ip address, not configured though


ipv6 addressing:
340 sextillion address spaces vs 4 billion ipv4 address spaces
ipv6 doesn't need any network translation because there are so many more addresses


CIDR : defines a way of expressing a size of a network,
subnetting: taking a larger network and breaking down into smaller networks, each of which has a higher prefix
entire internet: /0
class a network: /8
class b network: /16
class c network: /24
one ip address: /32
takeway: larger the subnet mask prefix, the smaller the network



DDOS attacks: attacks designed to overload websites, 
compete against legitimate connections,
distributed and therefore hard to block individual IPs/ranges
involve large armies of compromised machines (botnets)
3 types:
application Layer - HTTP flood: take advantage of imbalance of processing between client and server, send countless requests
protocol attack - SYN flood: takes advantage of the connection based nature of requests, spoof a source ip address and server can't complete stage 2 of handshake and waits an amount of time before it stops trying consuming resources
volumetric- DNS amplification: takes advantage of how certain protocols like DNS take only a small amount of data to make request and require large response



SSL, Secure Sockets Layer AND TLS, Transport Layer Security: provide privacy and data integrity between client and server
both do the same thing but TLS is newer and more secure version,

provides private communications that are encrypted first asymmetric and then symmetric
provides identity verification two ways possible, but generally client verifying server
provides reliable connection, detects data alteration

TLS phases that occur after TCP connection is made between client and server:
Cipher suites: set of protocols used by TLS that are agreed on for communications, server sends server certificate that contains public key
authentication: client needs to validate server certificate and public key is valid,  verifies via the CA, verifies the server has the private key
key exchange: moves from assymetric encryption to symmetric encryption



Hash Functions and Hashing:
hashing: process where algorithm is used to turn any kind of data into a fixed length representation of that data
hash function: input is data and output is fixed length representation called hash, unique data results in unique hash value, is one way because you can't use hash as input for hash function to get original data
collision: when different inputs result in same hash value, if there are collisions encryption is unreliable and less secure
MD-5: not reliable because data can be manipulated to cause collisions
SHA-256: modern and reliable hashing algorithm


Public vs Private Services:
refers to networking only
public aws service: something which is accessed using public endpoints, located in the AWS public zone and anyone can connect, but permissions are required to access the service
private aws service: something which located within a VPC and is accessed within a VPC or endpoints in a VPC 

Three Different Network Zones:
public internet zone: internet services, anyone can access
aws public zone: aws public services like s3, operates in between public internet zone and aws private zone, users access public aws zone using internet as transit
aws private zone: where VPCs reside,  VPCs are isolated unless configured otherwise, nothing from the internet can access the VPC unless you allow it, can be accessed via AWS VPN or Direct Connect
  internet gateway: 
  allows VPC service access to public internet with an allocated public ip address, 
  allows VPC service access to public aws service as long as data does not touch public internet at any point, 
  allows VPC service to be accessed via public internet by projecting VPC service into AWS public zone and makes part of or whole VPC service accessible as long as VPC service has an allocated public ip address 



AWS GLOBAL INFRASTRUCTURE:
region: 
a physical geographic location that is a collection of availability zones,
geographic separation allows isolated fault domain,
geopolitical seperation allows different governance that is dicted by that region and data stays within that region,
reference by: region code, ap-southeast-2, or region name, Asia Pacific (Sydney)
location control allows increased performance

edge locations: 
generally only have content distribution services, and edge computing, allow us to cache content and lower latency 

availability zone: 
single data center or a collection of data centers within a region
provides redundant networking, low latency, bc if one availability zone is affected the others most likely wont

service resilience:
globally resilient: 
service operates globally with a single database and its data is replicated across several regions, is highly available because it is always available unless every single region fails, ex route53 and IAM
region resilient:
service that operates in a single region with one set of data per region.  replicates data across multiple availability zones within that region.
AZ resilient:
service that operates in a single availability zone, if availability zone fails then that service fails



VIRTUAL PRIVATE CLOUD BASICS:
virtual private cloud, allows you to create a secure virtual private network in the AWS cloud where you secure your services and resources
connects:
allows you to connect your on premise data center to your AWS VPCs, and also allows you to connect to other cloud platforms when you're creating a multi cloud deployment

is within 1 account and 1 region, regionally resilient
private and isolated unless you decide otherwise

Default VPC: 
max of 1 per region, come preconfigured by aws, a lot less flexible than custom VPCs, you can remove and redeploy if you want
DEFAULT VPC CIDR: 172.31.0.0/16
to replicate across availabity zones: the CIDR range is broken into subnets so that there is a subnet for each availability zone
Subnets assign public IPv4 addresses: anything deployed in their subnets get deployed with public addresses
preconfigured with: IGW, SG, & NACL

Custom VPCs: 
can have many in 1 region, configure them in any way that you want, require you to configure everything end to end and private by default,



EC2 BASICS:
default compute service within AWS
allows you to rent and manage virtual servers in the cloud elastically, ec2 instances are the virtual servers running on the physical servers
instance: operating system configured in a certain way with a certain set of allocated resources
private service by default: uses VPC networking
resiliency: AZ resilient
features:
different instance sizes and capabilities, you can set when you provision or some settings can be changed even after deployment,
on demand billing, per second,
different types of storage: many, including on host storage or Elastic Block Store, EBS
states:
running and stopped:can toggle between states, like off/on switch
terminated:fully deleted once you move to termination state
charges:
cpu, memory, disk, and networking, charged per second,
charged for all four while running, 
charged for disk only while stopped,

AMIS:
AMI => EC2 => AMI:
ec2 instance can be generated from an amazon machine image, or generate an ami from ec2

ami: like a server image which can be used to create virtual machines or a usb device to install OS
permissions: which allow or deny access to the ami,
public: everyone allows
owner: private, implicitly allows the owner to create ami from ec2,
explicit: owner explicitly allows access to specific aws accounts

root volume: the c drive in windows, the drive that boots the OS
block device mapping: determines which volume is root volume and which volume is a data volume

CONNECTING TO AN EC2:
since we have different OS available for instances, we connect to different ports based on the OS
3389: Remote Desktop Protocol, windows instances
22: SSH Protocol, Linux instances



S3 Basics:
global object storage service that is regional based because data is stored inside a specific region and never moves unless you explicitly move it,
default storage service for AWS,
Regional resilient,
public service, unlimited data and multi-user,
economical
accessed via: UI, CLI, API, HTTP

objects: 
data that s3 stores, like a file
composed of key: like a fileName
composed of value: data or value of the object, can range from 0 bytes to 5TB
other components: version ID, metadata, access control, and subresources

buckets: 
containers that store objects
deployed in a specific aws region
blast radius: region
name needs to be globally unique
unlimited number of objects
structure: flat, all objects are stored at the root level.  However, displayed like there is a file structure in UI
configurations: most configurations for s3 are set at bucket level

exam powerup: 
bucket names are globally unique
3-63 characters, all lower case, no underscores
start with a lowercase letter or a number
can't be IP formatted
buckets have 100 soft limit, 1000 hard limit per account
unlimited objects in bucket, 0 bytes to 5 TB
key=name, value = data

Patterns and Antipatterns:
s3 is an object store, not file or block
you can't mount an s3 bucket as K:\ or /images, block storage has a single user limitation and s3 does not have that limitation
great for large scale data storage, distribution, or upload
great for offload, which deals with storing data on s3 bucket rather that ec2 instance
should be default input for any aws services or output to most aws products


Cloudformation Basics:
allows you to create templates to provisions AWS resources using IAC
written either in YAML or JSON

template: tells stack what logical resources to contain and their properties 
contains:
  resources: containes at least one logical resource, they have type and properties
  description: gives some details about the template, decription has to immediately follow AWSTemplateFormatVersion if there is one
  metadata: controls how resources look in the UI, and other things
  parameters: fields that prompt user for more information
  mappings: optional, it allows you to create lookup tables
  conditions: allow decision making in template that only occur if conditions are met
  outputs: once the template is finished, it can produce outputs

!Ref fnReferenceName : references another part of the Cloudformation template
!GetAtt : references another part of the Cloudformation template, and gets attibutes as well 

stack: created by template and contains all of the logical resources the template tells it to contain, then builds a physical resource in your account for each corresponding logical resource.
if you update the stack, it updates the corresponding physical resources
if you  delete the stack, it deletes the physical resources


Cloudwatch Basics:
what is it: collection of services that help you monitor and observe your cloud resources
and it allows you to collect logs, metrics, events, and set alarms
characteristics:
Metrics:AWS Products, apps, on premises
Logs:AWS Products, apps, on premises
Events:AWS services and schedules, 
Namespace:
container for monitoring data
metric:
time ordered set of data points, ex CPUUtilization
Datapoint:
measurement that contains time stamp and value
dimension:
separate datapoints for different things or perspectives with the same metric, ex one ec2 instance cpu utilization
alarms:
takes an action based on a specific metric
ok state and alarm state: once in alarm state it sends trigger to event


High Availability vs Fault Tolerance vs Disaster Recovery:

High Availability:
highly available systems are designed so that when it fails, it is designed to be fixed as quickly as possible.  
maximizes the system's online time, generally measured in percent of uptime of year, like 99.9%
fault tolerance: 
a fault tolerant system operates properly even while faults, which are failures of a system, are present.  Much more expensive than high availability because redundancies are put into place.
disaster recovery:
multiple stage of processes designed to keep the crucial and non replaceable parts of your system safe so when disaster occurs you don't lose anything irreplaceable and can rebuild after disaster


DNS Fundamentals:
discovery service
allows us to translate machine ip addresses into readable language and vice versa
www.amazon.com => 104.98.34.131
it's a huge database and has to be distributed
zone: 
a part of the DNS database that corresponds to a domain, think of it as logical domain, ex amazon.com, contains zone files
zone file:
physical database for a zone that contains the DNS info for a domain, contains the DNS records which has the mapping of website name to IP address
DNS SERVER:
nameserver (NS), server that hosts the zonefiles
DNS resolver Server:
located on your client, or router, or server within your IP, finds the NS you are looking for, then queries the server for the zone file
ROOT OF DNS, or DNS ROOT ZONE:
starting point of the DNS lookup
database hosted on 13 Root servers, 12 large companies manage the servers but not database
delegates authority to top level domains authoritative servers
Root Hints file:
installed on OS'S, pointer to root servers which allows your device to trust root servers

authoritative: trusted
delegated: authoritative entity passes trust to other entity so now other entity is trusted 
top level domains:
part of domain that is immediately left of last . ex:.com .org .uk
registries: organizations that are delegated from IANA to help manage top level domains
registrars: organizations that have relationship with registry that allow you to create a domain registration with them

DNS Record Types:
nameserver: allow delegation to occur in DNS
A, AAAA: map hostnames to IP, a maps to ipv4, aaaa maps to ipv6
CNAME: host to host records, lets you create the equivalent of DNS shortcuts, reduces admin overhead by pointing various services to same A record, so you will only have to update single A record, can only point to names not ips
MX: finds a mail server (SMTP) for a domain
TXT: allow you to add arbitrary text to a domain allowing further functionality, in some cases used to prove domain ownership

TTL: numerical value that can be set on DNS records, once a DNS record from zonefile is recovered by NS, records are cached on resolver server for TTL seconds, caching it so resolver server does not have to perform lookup again for TTL seconds


Route 53 Fundamentals:
allows us to register domains
allows us to host zones files on managed nameservers which it provides
global service with a single database
globally resilient

when registering a domain:
checks with TLD to see if domain is available
creates a zone file for registered domain, known as hosted zone
allocates 4 nameservers for the zone,
adds nameserver records to TLD that indicate that the namerservers are authoritative for domain

hosted zone:
zone files in AWS
hosted on four managed NS
can be public or private linked to VPCs
stores records, known as recordsets



*******************************************
IAM ACCOUNTS AND AWS ORGANIZATIONS:
*******************************************

IAM policies:
JSON document that allows or denies permissions for IAM users, groups, and roles
1 or more statements
Sid: statement id, optional field, allows you to provide summaryName of statement to quickly identify what it does, 
Action: can provide a wildcard * which means "all", list of multiple independent actions, or a specific individual action 
["service: operationName"]
Resource: same options above as action, 
["arnResourceNames"]
Effect: either allow or deny, controls what aws does if action and resource match

Every interaction you have with AWS, is a combination of resource you're interacting with and the actions that your attempting to perform on that resource
Policy precedence when two policies overlap permissions(ordered in highest precedence vs least):
1. Explicit deny 
2. explicit allow
3. default deny (implicit), aws identities have no access to any resources (besides root)

Inline Policies:
applying JSON to each account individually
use only when you need a special or exceptional allow or deny for a single user
Managed Policies: 
create policy, then attach to any identity that wishes to use it
reusable, low management overhead
aws managed policies: managed and created by AWS
custom managed policies: created and managed by you specific to your needs


IAM Users and ARNs:
entities you create in IAM to represent the person or application needing to access your aws resources
principal: 
represents an entity trying to access aws account
authenticates via username and password or access keys
authenticated identity:
principal that's proved it is who it says it is, aws performs authorization once the authenticated identity tries to access a resource

ARNS:
uniquely identify resources within any AWS accounts
formats differ depending on what your trying to do:
arn:partition:service:region:account-id:resource-id
arn:partition:service:region:account-id:resource-type/resource-id
arn:partition:service:region:account-id:resource-type:resource-id

fields are split by a colon, if you see ::: the field does not have to be specified, like for s3 buckets region or account id do not have to be specified because buckets are globally unique

ex of similar looking arn accessing different things:
arn:aws:s3:::catgifs : accesses bucket
arn:aws:s3:::catgifs/* : objects in the bucket

EXAM POWERUP:
5000 IAM users per account
iam user can be a member of 10 groups
therefore: if you have a system which requires more than 5000 identities then you cant use one IAM user for each identity, IAM roles and Identity Federation fix this 












